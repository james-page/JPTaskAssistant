@page "/calendar"
@rendermode InteractiveServer
@inject IDbContextFactory<JPTaskAssistantContext> ContextFactory

<PageTitle>Calendar</PageTitle>

<h1>Calendar</h1>

<div class="calendar">
    <div class="month">January 2024</div>
    <div class="days">
        <div class="day">Sun</div>
        <div class="day">Mon</div>
        <div class="day">Tue</div>
        <div class="day">Wed</div>
        <div class="day">Thu</div>
        <div class="day">Fri</div>
        <div class="day">Sat</div>
         @*Days will be dynamically generated using JavaScript*@ 
    </div>
    <div class="dates">
         @*Dates will be dynamically generated using JavaScript*@ 
    </div>
</div> 

@if(@jptasks is null){
    <div>Loading ....</div>
}
else{
    <ul>
        @foreach (var jptask in jptasks)
        {
            <li>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="@jptask.IsCompleted" id="flexCheckDefault">
                    <label class="form-check-label" for="flexCheckDefault">
                        @jptask.Title
                    </label>
                </div>
            </li>
        }
    </ul>
}


<input placeholder="Add a task" @bind="newTask"/>
<button @onclick="AddTask">Add Task</button>

@code {
    private string? newTask;
    private List<Data.Models.JPDailyListTask> jptasks = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();

        jptasks = await context.JPDailyListTask.ToListAsync();
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask))
        {
            jptasks.Add(new Data.Models.JPDailyListTask { Title = newTask });
            newTask = string.Empty;
            //Add to server        
        }
    }

    
}

