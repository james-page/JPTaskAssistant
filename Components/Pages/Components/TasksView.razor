@inject IDbContextFactory<JPTaskAssistantContext> ContextFactory
@inject NavigationManager NavigationManager

<ul class="pagination mt-3">
    <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
        <a class="page-link" href="/lists/@(CurrentPage - 1)">&lt</a>
    </li>
    @for (int i = 1; i <= TotalPages; i++)
    {
        <li class="page-item @(CurrentPage == i ? "active" : "")">
            <a class="page-link" href="/lists/@i">@i</a>
        </li>
    }
    <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
        <a class="page-link" href="/lists/@(CurrentPage + 1)">&gt</a>
    </li>
</ul>
<ul>
    @foreach (var jptask in jptasks)
    {
        <li>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="@jptask.IsCompleted" id="flexCheckDefault" onclick="">
                <label class="form-check-label" for="flexCheckDefault">
                    @jptask.Title
                </label>
            </div>
        </li>
    }
</ul>

@code {
    [Parameter]
    public int? CurrentPage { get; set; }

    private int TotalPages { get; set; }

    private const int itemsPerPage = 3;

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentPage is null or < 1)
        {
            //navigate to first page since 0 page doesn't exist
            NavigationManager.NavigateTo("/lists/1");
            return;
        }

        using var context = ContextFactory.CreateDbContext();

        var jpTaskCount = await context.JPDailyListTask.CountAsync();
        TotalPages = jpTaskCount == 0 ? 1 : (int)Math.Ceiling((double)jpTaskCount / itemsPerPage);

        if (CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"/lists/{TotalPages}");
            //TODO let user know the page asked for does not exist?
            return;
        }

        var itemsToSkip = (CurrentPage.Value - 1) * itemsPerPage;

        jptasks = await context.JPDailyListTask
            .OrderBy(jpt => jpt.DateEntered)
            .Skip(itemsToSkip)
            .Take(itemsPerPage)
            .ToListAsync();
    }
}
